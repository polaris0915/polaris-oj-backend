// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"polaris-oj-backend/polaris_oj_backend/allModels"
)

func newQuestion(db *gorm.DB, opts ...gen.DOOption) question {
	_question := question{}

	_question.questionDo.UseDB(db, opts...)
	_question.questionDo.UseModel(&allModels.Question{})

	tableName := _question.questionDo.TableName()
	_question.ALL = field.NewAsterisk(tableName)
	_question.ID = field.NewInt64(tableName, "id")
	_question.Identity = field.NewString(tableName, "identity")
	_question.Title = field.NewString(tableName, "title")
	_question.Content = field.NewString(tableName, "content")
	_question.Tags = field.NewString(tableName, "tags")
	_question.Answer = field.NewString(tableName, "answer")
	_question.SubmitNum = field.NewInt32(tableName, "submitNum")
	_question.AcceptedNum = field.NewInt32(tableName, "acceptedNum")
	_question.JudgeCase = field.NewString(tableName, "judgeCase")
	_question.JudgeConfig = field.NewString(tableName, "judgeConfig")
	_question.ThumbNum = field.NewInt32(tableName, "thumbNum")
	_question.FavourNum = field.NewInt32(tableName, "favourNum")
	_question.UserID = field.NewString(tableName, "userId")
	_question.CreatedAt = field.NewTime(tableName, "created_at")
	_question.UpdatedAt = field.NewTime(tableName, "updated_at")
	_question.DeletedAt = field.NewField(tableName, "deleted_at")

	_question.fillFieldMap()

	return _question
}

// question 题目
type question struct {
	questionDo questionDo

	ALL         field.Asterisk
	ID          field.Int64  // id
	Identity    field.String // 唯一ID
	Title       field.String // 标题
	Content     field.String // 内容
	Tags        field.String // 标签列表（json 数组）
	Answer      field.String // 题目答案
	SubmitNum   field.Int32  // 题目提交数
	AcceptedNum field.Int32  // 题目通过数
	JudgeCase   field.String // 判题用例（json 数组）
	JudgeConfig field.String // 判题配置（json 对象）
	ThumbNum    field.Int32  // 点赞数
	FavourNum   field.Int32  // 收藏数
	UserID      field.String // 创建用户唯一ID
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间
	DeletedAt   field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (q question) Table(newTableName string) *question {
	q.questionDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q question) As(alias string) *question {
	q.questionDo.DO = *(q.questionDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *question) updateTableName(table string) *question {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.Identity = field.NewString(table, "identity")
	q.Title = field.NewString(table, "title")
	q.Content = field.NewString(table, "content")
	q.Tags = field.NewString(table, "tags")
	q.Answer = field.NewString(table, "answer")
	q.SubmitNum = field.NewInt32(table, "submitNum")
	q.AcceptedNum = field.NewInt32(table, "acceptedNum")
	q.JudgeCase = field.NewString(table, "judgeCase")
	q.JudgeConfig = field.NewString(table, "judgeConfig")
	q.ThumbNum = field.NewInt32(table, "thumbNum")
	q.FavourNum = field.NewInt32(table, "favourNum")
	q.UserID = field.NewString(table, "userId")
	q.CreatedAt = field.NewTime(table, "created_at")
	q.UpdatedAt = field.NewTime(table, "updated_at")
	q.DeletedAt = field.NewField(table, "deleted_at")

	q.fillFieldMap()

	return q
}

func (q *question) WithContext(ctx context.Context) *questionDo { return q.questionDo.WithContext(ctx) }

func (q question) TableName() string { return q.questionDo.TableName() }

func (q question) Alias() string { return q.questionDo.Alias() }

func (q question) Columns(cols ...field.Expr) gen.Columns { return q.questionDo.Columns(cols...) }

func (q *question) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *question) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 17)
	q.fieldMap["id"] = q.ID
	q.fieldMap["identity"] = q.Identity
	q.fieldMap["title"] = q.Title
	q.fieldMap["content"] = q.Content
	q.fieldMap["tags"] = q.Tags
	q.fieldMap["answer"] = q.Answer
	q.fieldMap["submitNum"] = q.SubmitNum
	q.fieldMap["acceptedNum"] = q.AcceptedNum
	q.fieldMap["judgeCase"] = q.JudgeCase
	q.fieldMap["judgeConfig"] = q.JudgeConfig
	q.fieldMap["thumbNum"] = q.ThumbNum
	q.fieldMap["favourNum"] = q.FavourNum
	q.fieldMap["userId"] = q.UserID
	q.fieldMap["created_at"] = q.CreatedAt
	q.fieldMap["updated_at"] = q.UpdatedAt
	q.fieldMap["deleted_at"] = q.DeletedAt

}

func (q question) clone(db *gorm.DB) question {
	q.questionDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q question) replaceDB(db *gorm.DB) question {
	q.questionDo.ReplaceDB(db)
	return q
}

type questionDo struct{ gen.DO }

func (q questionDo) Debug() *questionDo {
	return q.withDO(q.DO.Debug())
}

func (q questionDo) WithContext(ctx context.Context) *questionDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q questionDo) ReadDB() *questionDo {
	return q.Clauses(dbresolver.Read)
}

func (q questionDo) WriteDB() *questionDo {
	return q.Clauses(dbresolver.Write)
}

func (q questionDo) Session(config *gorm.Session) *questionDo {
	return q.withDO(q.DO.Session(config))
}

func (q questionDo) Clauses(conds ...clause.Expression) *questionDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q questionDo) Returning(value interface{}, columns ...string) *questionDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q questionDo) Not(conds ...gen.Condition) *questionDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q questionDo) Or(conds ...gen.Condition) *questionDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q questionDo) Select(conds ...field.Expr) *questionDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q questionDo) Where(conds ...gen.Condition) *questionDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q questionDo) Order(conds ...field.Expr) *questionDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q questionDo) Distinct(cols ...field.Expr) *questionDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q questionDo) Omit(cols ...field.Expr) *questionDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q questionDo) Join(table schema.Tabler, on ...field.Expr) *questionDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q questionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *questionDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q questionDo) RightJoin(table schema.Tabler, on ...field.Expr) *questionDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q questionDo) Group(cols ...field.Expr) *questionDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q questionDo) Having(conds ...gen.Condition) *questionDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q questionDo) Limit(limit int) *questionDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q questionDo) Offset(offset int) *questionDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q questionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *questionDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q questionDo) Unscoped() *questionDo {
	return q.withDO(q.DO.Unscoped())
}

func (q questionDo) Create(values ...*allModels.Question) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q questionDo) CreateInBatches(values []*allModels.Question, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q questionDo) Save(values ...*allModels.Question) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q questionDo) First() (*allModels.Question, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*allModels.Question), nil
	}
}

func (q questionDo) Take() (*allModels.Question, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*allModels.Question), nil
	}
}

func (q questionDo) Last() (*allModels.Question, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*allModels.Question), nil
	}
}

func (q questionDo) Find() ([]*allModels.Question, error) {
	result, err := q.DO.Find()
	return result.([]*allModels.Question), err
}

func (q questionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*allModels.Question, err error) {
	buf := make([]*allModels.Question, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q questionDo) FindInBatches(result *[]*allModels.Question, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q questionDo) Attrs(attrs ...field.AssignExpr) *questionDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q questionDo) Assign(attrs ...field.AssignExpr) *questionDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q questionDo) Joins(fields ...field.RelationField) *questionDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q questionDo) Preload(fields ...field.RelationField) *questionDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q questionDo) FirstOrInit() (*allModels.Question, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*allModels.Question), nil
	}
}

func (q questionDo) FirstOrCreate() (*allModels.Question, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*allModels.Question), nil
	}
}

func (q questionDo) FindByPage(offset int, limit int) (result []*allModels.Question, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q questionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q questionDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q questionDo) Delete(models ...*allModels.Question) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *questionDo) withDO(do gen.Dao) *questionDo {
	q.DO = *do.(*gen.DO)
	return q
}
