definitions:
  dto.DeleteRequest:
    properties:
      identity:
        type: string
    required:
    - identity
    type: object
  file_vo.FileVO:
    properties:
      fileUrl:
        type: string
    type: object
  judgecase.JudgeCase:
    properties:
      input:
        type: string
      output:
        type: string
    type: object
  judgeconfig.JudgeConfig:
    properties:
      memoryLimit:
        type: integer
      stackLimit:
        type: integer
      timeLimit:
        type: integer
    type: object
  question_dto.QuestionAddRequest:
    properties:
      answer:
        type: string
      content:
        type: string
      identity:
        type: string
      judgeCase:
        items:
          $ref: '#/definitions/judgecase.JudgeCase'
        type: array
      judgeConfig:
        $ref: '#/definitions/judgeconfig.JudgeConfig'
      tags:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - answer
    - content
    - judgeCase
    - judgeConfig
    - title
    type: object
  question_dto.QuestionQueryByPageRequest:
    properties:
      current:
        type: integer
      identity:
        description: 可以由以下类别来查询
        type: string
      pageSize:
        type: integer
      sortField:
        type: string
      sortOrder:
        type: string
      userId:
        description: 管理员查询的是否可以用UserID来查询
        type: string
    type: object
  question_dto.QuestionUpdateRequest:
    properties:
      answer:
        type: string
      content:
        type: string
      identity:
        type: string
      judgeCase:
        items:
          $ref: '#/definitions/judgecase.JudgeCase'
        type: array
      judgeConfig:
        $ref: '#/definitions/judgeconfig.JudgeConfig'
      tags:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - answer
    - content
    - identity
    - judgeCase
    - judgeConfig
    - tags
    - title
    type: object
  question_vo.QueryQuestionVO:
    properties:
      MaxLimit:
        type: integer
      countId:
        type: string
      current:
        type: integer
      oders:
        items:
          additionalProperties: {}
          type: object
        type: array
      optimizeCountSql:
        type: boolean
      pages:
        type: integer
      records:
        items:
          $ref: '#/definitions/question_vo.QuestionVO'
        type: array
      searchCount:
        type: boolean
      size:
        type: integer
      total:
        type: integer
    type: object
  question_vo.QuestionVO:
    properties:
      acceptedNum:
        description: 题目通过数
        type: integer
      content:
        description: 内容
        type: string
      createTime:
        description: 'TODO question: 这边时间的名字没有对应上，不知道会不会出问题'
        type: string
      favourNum:
        description: 收藏数
        type: integer
      identity:
        description: id
        type: string
      judgeConfig:
        allOf:
        - $ref: '#/definitions/judgeconfig.JudgeConfig'
        description: 判题配置（json 对象）
      submitNum:
        description: 题目提交数
        type: integer
      tags:
        description: 标签列表
        items:
          type: string
        type: array
      thumbNum:
        description: 点赞数
        type: integer
      title:
        description: 标题
        type: string
      updateTime:
        description: 更新时间
        type: string
      userId:
        description: 创建用户 id
        type: string
      userVO:
        allOf:
        - $ref: '#/definitions/user_vo.UserVO'
        description: 创建题目人的信息
    type: object
  questionsubmit_dto.QuestionSubmitAddRequest:
    properties:
      conetnt:
        description: Status     int32  `json:"status"`                              //
          提交状态
        type: string
      language:
        description: 编程语言
        type: string
      questionId:
        description: 问题的identity
        type: string
    required:
    - language
    - questionId
    type: object
  questionsubmit_dto.QuestionSubmitQueryRequest:
    properties:
      current:
        type: integer
      language:
        type: string
      pageSize:
        type: integer
      questionId:
        type: string
      sortField:
        type: string
      sortOrder:
        type: string
      status:
        description: 可以由以下类别来查询
        type: integer
      userId:
        description: 管理员查询的是否可以用UserID来查询
        type: string
    type: object
  questionsubmit_vo.QueryQuestionSubmitVO:
    properties:
      MaxLimit:
        type: integer
      countId:
        type: string
      current:
        type: integer
      oders:
        items:
          additionalProperties: {}
          type: object
        type: array
      optimizeCountSql:
        type: boolean
      pages:
        type: integer
      records:
        items:
          $ref: '#/definitions/questionsubmit_vo.QuestionSubmitVO'
        type: array
      searchCount:
        type: boolean
      size:
        type: integer
      total:
        type: integer
    type: object
  questionsubmit_vo.QuestionSubmitVO:
    properties:
      conetnt:
        description: 用户代码
        type: string
      created_at:
        description: 创建时间
        type: string
      identity:
        description: 唯一ID
        type: string
      judgeInfo:
        description: 判题信息（json 对象）
        type: string
      language:
        description: 编程语言
        type: string
      question:
        allOf:
        - $ref: '#/definitions/question_vo.QuestionVO'
        description: 题目信息
      questionId:
        description: 题目 id
        type: string
      status:
        description: 判题状态（0 - 待判题、1 - 判题中、2 - 成功、3 - 失败）
        type: integer
      updated_at:
        description: 更新时间
        type: string
      user:
        allOf:
        - $ref: '#/definitions/user_vo.UserVO'
        description: 提交用户信息
      userId:
        description: 题目创建用户唯一ID
        type: string
    type: object
  user_dto.UserAddRequest:
    properties:
      checkPassword:
        type: string
      userAccount:
        type: string
      userPassword:
        type: string
    required:
    - checkPassword
    - userAccount
    - userPassword
    type: object
  user_dto.UserLoginRequest:
    properties:
      userAccount:
        description: Identity     string `json:"identity,omitempty"`
        type: string
      userPassword:
        type: string
    required:
    - userAccount
    - userPassword
    type: object
  user_dto.UserUpdateMyUserRequest:
    properties:
      userEmail:
        type: string
      userName:
        type: string
      userProfile:
        type: string
    type: object
  user_vo.UserVO:
    properties:
      createTime:
        type: string
      identity:
        type: string
      updateTime:
        type: string
      userAvatar:
        type: string
      userName:
        type: string
      userProfile:
        type: string
      userRole:
        type: string
    type: object
  vo.BaseResponse-bool:
    properties:
      code:
        description: 响应码
        type: integer
      data:
        description: 接口，表示具体信息
        type: boolean
      message:
        description: 请求结果[发生错误则是错误信息，如果没有错误则是SUCCESS.Code的值]
        type: string
    type: object
  vo.BaseResponse-file_vo_FileVO:
    properties:
      code:
        description: 响应码
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/file_vo.FileVO'
        description: 接口，表示具体信息
      message:
        description: 请求结果[发生错误则是错误信息，如果没有错误则是SUCCESS.Code的值]
        type: string
    type: object
  vo.BaseResponse-question_vo_QueryQuestionVO:
    properties:
      code:
        description: 响应码
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/question_vo.QueryQuestionVO'
        description: 接口，表示具体信息
      message:
        description: 请求结果[发生错误则是错误信息，如果没有错误则是SUCCESS.Code的值]
        type: string
    type: object
  vo.BaseResponse-question_vo_QuestionVO:
    properties:
      code:
        description: 响应码
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/question_vo.QuestionVO'
        description: 接口，表示具体信息
      message:
        description: 请求结果[发生错误则是错误信息，如果没有错误则是SUCCESS.Code的值]
        type: string
    type: object
  vo.BaseResponse-questionsubmit_vo_QueryQuestionSubmitVO:
    properties:
      code:
        description: 响应码
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/questionsubmit_vo.QueryQuestionSubmitVO'
        description: 接口，表示具体信息
      message:
        description: 请求结果[发生错误则是错误信息，如果没有错误则是SUCCESS.Code的值]
        type: string
    type: object
  vo.BaseResponse-user_vo_UserVO:
    properties:
      code:
        description: 响应码
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/user_vo.UserVO'
        description: 接口，表示具体信息
      message:
        description: 请求结果[发生错误则是错误信息，如果没有错误则是SUCCESS.Code的值]
        type: string
    type: object
info:
  contact: {}
paths:
  /api/file/upload:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/vo.BaseResponse-file_vo_FileVO'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: 上传文件
      tags:
      - 文件
  /api/get/user/login:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/vo.BaseResponse-user_vo_UserVO'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: 获取当前登录用户
      tags:
      - 用户
  /api/question/add:
    post:
      parameters:
      - description: add question info
        in: body
        name: addInfo
        required: true
        schema:
          $ref: '#/definitions/question_dto.QuestionAddRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/vo.BaseResponse-bool'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: 问题添加
      tags:
      - 问题
  /api/question/delete:
    post:
      parameters:
      - description: delete question info
        in: body
        name: deleteInfo
        required: true
        schema:
          $ref: '#/definitions/dto.DeleteRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/vo.BaseResponse-bool'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: 问题删除
      tags:
      - 问题
  /api/question/get:
    get:
      parameters:
      - description: identity
        in: query
        name: Identity
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/vo.BaseResponse-question_vo_QuestionVO'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: 通过问题的Identity获取问题详情
      tags:
      - 问题
  /api/question/list/page:
    post:
      parameters:
      - description: query question info
        in: body
        name: queryInfo
        required: true
        schema:
          $ref: '#/definitions/question_dto.QuestionQueryByPageRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/vo.BaseResponse-question_vo_QueryQuestionVO'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: 分页查询问题
      tags:
      - 问题
  /api/question/question_submit/do:
    post:
      parameters:
      - description: add questionSubmit info
        in: body
        name: addInfo
        required: true
        schema:
          $ref: '#/definitions/questionsubmit_dto.QuestionSubmitAddRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/vo.BaseResponse-bool'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: 添加问题提交记录
      tags:
      - 问题提交
  /api/question/question_submit/list/page:
    post:
      parameters:
      - description: query questionSubmit info
        in: body
        name: queryInfo
        required: true
        schema:
          $ref: '#/definitions/questionsubmit_dto.QuestionSubmitQueryRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/vo.BaseResponse-questionsubmit_vo_QueryQuestionSubmitVO'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: 分页查询提交问题
      tags:
      - 问题提交
  /api/question/update:
    post:
      parameters:
      - description: update question info
        in: body
        name: updateInfo
        required: true
        schema:
          $ref: '#/definitions/question_dto.QuestionUpdateRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/vo.BaseResponse-bool'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: 问题修改
      tags:
      - 问题
  /api/user/delete:
    post:
      parameters:
      - description: delete question info
        in: body
        name: deleteInfo
        required: true
        schema:
          $ref: '#/definitions/dto.DeleteRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/vo.BaseResponse-bool'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: 用户删除
      tags:
      - 用户
  /api/user/login:
    post:
      parameters:
      - description: user login infos
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/user_dto.UserLoginRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/vo.BaseResponse-user_vo_UserVO'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: 用户登陆
      tags:
      - 用户
  /api/user/logout:
    post:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/vo.BaseResponse-bool'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: 用户退出登录
      tags:
      - 用户
  /api/user/my:
    post:
      parameters:
      - description: user login infos
        in: body
        name: updateInfo
        required: true
        schema:
          $ref: '#/definitions/user_dto.UserUpdateMyUserRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/vo.BaseResponse-bool'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: 用户更新自己的数据
      tags:
      - 用户
  /api/user/register:
    post:
      parameters:
      - description: user Register infos
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/user_dto.UserAddRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/vo.BaseResponse-bool'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: 用户注册
      tags:
      - 用户
  /api/user/update-avatar:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/vo.BaseResponse-user_vo_UserVO'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: 用户更新头像
      tags:
      - 用户
swagger: "2.0"
